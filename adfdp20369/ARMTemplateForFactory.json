{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfdp20369"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"OutputSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OutputSQL'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InputDataset",
								"type": "DatasetReference",
								"parameters": {
									"fileName": "cars.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OutputDataset",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "Cars"
								}
							}
						]
					},
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SQLTableSource": {
										"tableName": "Cars"
									},
									"sink1": {
										"tableName": "Cars"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-12-30T23:18:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputDataset')]",
				"[concat(variables('factoryId'), '/datasets/OutputDataset')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSQL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Make",
						"type": "nvarchar"
					},
					{
						"name": "Model",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Origin",
						"type": "nvarchar"
					},
					{
						"name": "DriveTrain",
						"type": "nvarchar"
					},
					{
						"name": "Length",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Cars"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Film",
						"type": "String"
					},
					{
						"name": "Genre",
						"type": "String"
					},
					{
						"name": "Lead Studio",
						"type": "String"
					},
					{
						"name": "Audience score %",
						"type": "String"
					},
					{
						"name": "Profitability",
						"type": "String"
					},
					{
						"name": "Rotten Tomatoes %",
						"type": "String"
					},
					{
						"name": "Worldwide Gross",
						"type": "String"
					},
					{
						"name": "Year",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Film",
						"type": "varchar"
					},
					{
						"name": "Genre",
						"type": "varchar"
					},
					{
						"name": "Lead Studio",
						"type": "varchar"
					},
					{
						"name": "Audience score %",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Profitability",
						"type": "decimal",
						"precision": 18,
						"scale": 5
					},
					{
						"name": "Rotten Tomatoes %",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Worldwide Gross",
						"type": "varchar"
					},
					{
						"name": "Year",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OutputSQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OutputDataset",
								"type": "DatasetReference"
							},
							"name": "SQLTableSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OutputDataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "selectRotten",
							"description": "Renaming Rotten Tomatoes % to Rotten"
						},
						{
							"name": "filterYear"
						},
						{
							"name": "WorldwideConvert"
						},
						{
							"name": "windowRatingsRanks",
							"description": "Windowing on genre and year, sorting with rotten, and calculating ranks"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Film as string,",
						"          Genre as string,",
						"          {Lead Studio} as string,",
						"          {Audience score %} as integer,",
						"          Profitability as decimal(18,5),",
						"          {Rotten Tomatoes %} as integer,",
						"          {Worldwide Gross} as string,",
						"          Year as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SQLTableSource",
						"SQLTableSource select(mapColumn(",
						"          Film,",
						"          Genre,",
						"          {Lead Studio},",
						"          {Audience score %},",
						"          Profitability,",
						"          Rotten = {Rotten Tomatoes %},",
						"          {Worldwide Gross},",
						"          Year",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRotten",
						"selectRotten filter(Year > 2000) ~> filterYear",
						"filterYear derive({Worldwide Gross} = toFloat(right({Worldwide Gross}, length({Worldwide Gross}) - 1))) ~> WorldwideConvert",
						"WorldwideConvert window(over(Genre,",
						"          Year),",
						"     desc(Rotten, true),",
						"     RatingsRank = rank()) ~> windowRatingsRanks",
						"cast1 alterRow(insertIf(true())) ~> alterRow1",
						"windowRatingsRanks cast(output(",
						"          {Worldwide Gross} as string",
						"     ),",
						"     errors: true) ~> cast1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Film as string,",
						"          Genre as string,",
						"          {Lead Studio} as string,",
						"          {Audience score %} as integer,",
						"          Profitability as decimal(18,5),",
						"          {Rotten Tomatoes %} as integer,",
						"          {Worldwide Gross} as string,",
						"          Year as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Film,",
						"          Genre,",
						"          {Lead Studio},",
						"          {Audience score %},",
						"          Profitability,",
						"          {Rotten Tomatoes %} = Rotten,",
						"          {Worldwide Gross},",
						"          Year",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OutputDataset')]"
			]
		}
	]
}